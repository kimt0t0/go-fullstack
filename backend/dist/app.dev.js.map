{"version":3,"sources":["app.js"],"names":["express","require","mongoose","app","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","req","res","next","setHeader","post","body","status","message","get","stuff","_id","title","description","imageUrl","price","userId","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAME,GAAG,GAAGH,OAAO,EAAnB;AAEAG,GAAG,CAACC,GAAJ,CAAQJ,OAAO,CAACK,IAAR,EAAR,E,CAAyB;AACzB;;AAGAH,QAAQ,CAACI,OAAT,CAAiB,mGAAjB,EACA;AACA;AACE;AACEC,EAAAA,eAAe,EAAE,IADnB;AAEEC,EAAAA,kBAAkB,EAAE;AAFtB,CAHF,EAOGC,IAPH,CAOQ;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAAN;AAAA,CAPR,WAQS;AAAA,SAAMD,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAAN;AAAA,CART;AAYAR,GAAG,CAACC,GAAJ,CAAQ,UAACQ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBD,EAAAA,GAAG,CAACE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C,EADwB,CAC2B;;AACnDF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,wEAA9C,EAFwB,CAEiG;;AACzHF,EAAAA,GAAG,CAACE,SAAJ,CAAc,8BAAd,EAA8C,wCAA9C,EAHwB,CAGiE;;AACzFD,EAAAA,IAAI;AACL,CALH;AAOAX,GAAG,CAACa,IAAJ,CAAS,YAAT,EAAuB,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzCJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACK,IAAhB;AACAJ,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AAAM;AACzBc,IAAAA,OAAO,EAAE;AADU,GAArB;AAGD,CALD;AAOAhB,GAAG,CAACiB,GAAJ,CAAQ,YAAR,EAAsB,UAACR,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,MAAMO,KAAK,GAAG,CACZ;AACEC,IAAAA,GAAG,EAAE,WADP;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,WAAW,EAAE,gCAHf;AAIEC,IAAAA,QAAQ,EAAE,wEAJZ;AAKEC,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,MAAM,EAAE;AANV,GADY,EASZ;AACEL,IAAAA,GAAG,EAAE,eADP;AAEEC,IAAAA,KAAK,EAAE,oBAFT;AAGEC,IAAAA,WAAW,EAAE,iCAHf;AAIEC,IAAAA,QAAQ,EAAE,wEAJZ;AAKEC,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,MAAM,EAAE;AANV,GATY,CAAd;AAkBAd,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqBgB,KAArB;AACD,CApBH;AAuBAO,MAAM,CAACC,OAAP,GAAiB1B,GAAjB","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\n\r\nconst app = express();\r\n\r\napp.use(express.json()); //intercepte toutes les requêtes dont le content-type est json et les met à dispo sur l'objet requête dans req.body\r\n//(autre façon de faire plus ancienne: utiliser le package bodyparser)\r\n\r\n\r\nmongoose.connect(\"mongodb+srv://kimt0t0:<adaJNM39-&>@kimrobcluster.8tem1u2.mongodb.net/?retryWrites=true&w=majority\",\r\n//connexion à la base de donnée mongoDB\r\n//penser à intégrer le mot de passe utilisateur MongoDB après le nom utilisateur ici.mongoose.connect('mongodb+srv://jimbob:<PASSWORD>@cluster0-pme76.mongodb.net/test?retryWrites=true&w=majority',\r\n  {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  })\r\n  .then(() => console.log('Connexion à MongoDB réussie !'))\r\n  .catch(() => console.log('Connexion à MongoDB échouée !')\r\n);\r\n\r\n\r\napp.use((req, res, next) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*'); //permet d'accéder à l'API depuis n'importe-quelle origine\r\n    res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content, Accept, Content-Type, Authorization'); //ajout des headers aux requêtes envoyées\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS'); //envoi des requêtes avec les méthodes mentionnées\r\n    next();\r\n  });\r\n\r\napp.post('/api/stuff', (req, res, next) => {\r\n  console.log(req.body);\r\n  res.status(201).json({     //201 = code pour création de ressource, nécessaire de renvoyer ce statut sinon ça plante côté utilisateur\r\n    message: 'Objet créé !'\r\n  });\r\n});\r\n\r\napp.get('/api/stuff', (req, res, next) => {\r\n    const stuff = [\r\n      {\r\n        _id: 'oeihfzeoi',\r\n        title: 'Mon premier objet',\r\n        description: 'Les infos de mon premier objet',\r\n        imageUrl: 'https://cdn.pixabay.com/photo/2019/06/11/18/56/camera-4267692_1280.jpg',\r\n        price: 4900,\r\n        userId: 'qsomihvqios',\r\n      },\r\n      {\r\n        _id: 'oeihfzeomoihi',\r\n        title: 'Mon deuxième objet',\r\n        description: 'Les infos de mon deuxième objet',\r\n        imageUrl: 'https://cdn.pixabay.com/photo/2019/06/11/18/56/camera-4267692_1280.jpg',\r\n        price: 2900,\r\n        userId: 'qsomihvqios',\r\n      },\r\n    ];\r\n    res.status(200).json(stuff);\r\n  });\r\n\r\n\r\nmodule.exports = app;"],"file":"app.dev.js"}