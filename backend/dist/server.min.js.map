{"version":3,"sources":["server.js"],"names":["http","require","app","normalizePort","val","port","parseInt","isNaN","process","env","PORT","set","errorHandler","error","syscall","address","bind","code","exit","server","createServer","on","console","listen"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,QACfC,IAAMD,QAAQ,SAEdE,cAAgB,SAAAC,GAClB,IAAMC,EAAOC,SAASF,EAAK,IAE3B,OAAIG,MAAMF,GACCD,EAHEE,GAAPD,GAMKA,GAITA,KAAOF,cAAcK,QAAQC,IAAIC,MAAQ,QAJvCR,IAAAS,IAAA,OAAAN,MAQR,IAAMO,aAAe,SAAAC,GANjB,GAAA,WAAAA,EAAAC,QATJ,MAAAD,EAWMR,IAAIU,EAAGZ,OAAcK,UAEnBQ,EAAR,iBAAAD,EAAA,OAAAA,EAAA,SAAAV,KAQI,OAAQQ,EAAMI,MANZL,IAAAA,SACQE,QAAND,MAAkBG,EAAtB,kCACUH,QAANK,KAAA,GACH,MAQG,IAAK,aAPHH,QAAUI,MAAOJ,EAAvB,uBACUP,QAAUO,KAAAA,GASZ,MARR,QACS,MAALF,IAIAM,OAAKnB,KAAAoB,aAALlB,KAEIM,OAAAA,GAAAA,QAAaI,cACbO,OAAAE,GAAA,YAAA,WAWR,IAAMN,EAAUI,OAAOJ,UAVnBC,EAAA,iBAAAD,EAAA,OAAAA,EAAA,OAAAV,KACIiB,QAAMT,IAAAA,gBAANG,KAcZG,OAAOI,OAAOlB","file":"server.min.js","sourcesContent":["const http = require('http'); //importe le package HTTP natif de Node\r\nconst app = require('./app'); //importe l'application fonctionnant avec Express\r\n\r\nconst normalizePort = val => {\r\n    const port = parseInt(val, 10);\r\n\r\n    if (isNaN(port)) {\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        return port;\r\n    }\r\n    return false;\r\n};\r\nconst port = normalizePort(process.env.PORT || '3000');\r\n\r\napp.set('port', port);\r\n\r\nconst errorHandler = error => {\r\n    if (error.syscall !== 'listen') {\r\n        throw error;\r\n    }\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port: ' + port;\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.error(bind + ' requires elevated privileges.');\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use.');\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n}\r\n\r\n//création d'un serveur avec une fonction exécutée à chaque appel vers ce serveur:\r\nconst server = http.createServer(app);\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port' + port;\r\n    console.log('listening on ' + bind);\r\n})\r\n\r\nserver.listen(port); //le serveur écoute soit le port indiqué par la plateforme, soit port 3000 par défaut\r\n\r\n//Exécuter 'node server' depuis la console pour démarrer le serveur!\r\n"]}