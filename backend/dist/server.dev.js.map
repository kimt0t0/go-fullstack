{"version":3,"sources":["server.js"],"names":["http","require","app","normalizePort","val","port","parseInt","isNaN","process","env","PORT","set","errorHandler","error","syscall","address","server","bind","code","console","exit","createServer","on","log","listen"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAA8B;;;AAC9B,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB,C,CAA8B;;;AAE9B,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,GAAG,EAAI;AACzB,MAAMC,IAAI,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAIG,KAAK,CAACF,IAAD,CAAT,EAAiB;AACb,WAAOD,GAAP;AACH;;AACD,MAAIC,IAAI,IAAI,CAAZ,EAAe;AACX,WAAOA,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAVD;;AAWA,IAAMA,IAAI,GAAGF,aAAa,CAACK,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;AAEAR,GAAG,CAACS,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC1B,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,UAAMD,KAAN;AACH;;AACD,MAAME,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,SAASA,OAAvC,GAAiD,WAAWV,IAAzE;;AACA,UAAQQ,KAAK,CAACK,IAAd;AACI,SAAK,QAAL;AACIC,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,gCAArB;AACAT,MAAAA,OAAO,CAACY,IAAR,CAAa,CAAb;AACA;;AACJ,SAAK,YAAL;AACID,MAAAA,OAAO,CAACN,KAAR,CAAcI,IAAI,GAAG,qBAArB;AACAT,MAAAA,OAAO,CAACY,IAAR,CAAa,CAAb;AACA;;AACJ;AACI,YAAMP,KAAN;AAVR;AAYH,CAlBD,C,CAoBA;;;AACA,IAAMG,MAAM,GAAGhB,IAAI,CAACqB,YAAL,CAAkBnB,GAAlB,CAAf;AAEAc,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmBV,YAAnB;AACAI,MAAM,CAACM,EAAP,CAAU,WAAV,EAAuB,YAAM;AACzB,MAAMP,OAAO,GAAGC,MAAM,CAACD,OAAP,EAAhB;AACA,MAAME,IAAI,GAAG,OAAOF,OAAP,KAAmB,QAAnB,GAA8B,SAASA,OAAvC,GAAiD,SAASV,IAAvE;AACAc,EAAAA,OAAO,CAACI,GAAR,CAAY,kBAAkBN,IAA9B;AACH,CAJD;AAMAD,MAAM,CAACQ,MAAP,CAAcnB,IAAd,E,CAAqB;AAErB","sourcesContent":["const http = require('http'); //importe le package HTTP natif de Node\r\nconst app = require('./app'); //importe l'application fonctionnant avec Express\r\n\r\nconst normalizePort = val => {\r\n    const port = parseInt(val, 10);\r\n\r\n    if (isNaN(port)) {\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        return port;\r\n    }\r\n    return false;\r\n};\r\nconst port = normalizePort(process.env.PORT || '3000');\r\n\r\napp.set('port', port);\r\n\r\nconst errorHandler = error => {\r\n    if (error.syscall !== 'listen') {\r\n        throw error;\r\n    }\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port: ' + port;\r\n    switch (error.code) {\r\n        case 'EACCES':\r\n            console.error(bind + ' requires elevated privileges.');\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(bind + ' is already in use.');\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n}\r\n\r\n//création d'un serveur avec une fonction exécutée à chaque appel vers ce serveur:\r\nconst server = http.createServer(app);\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n    const address = server.address();\r\n    const bind = typeof address === 'string' ? 'pipe' + address : 'port' + port;\r\n    console.log('listening on ' + bind);\r\n})\r\n\r\nserver.listen(port); //le serveur écoute soit le port indiqué par la plateforme, soit port 3000 par défaut\r\n\r\n//Exécuter 'node server' depuis la console pour démarrer le serveur!\r\n"],"file":"server.dev.js"}